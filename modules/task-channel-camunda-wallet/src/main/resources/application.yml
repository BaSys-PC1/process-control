debug: true
spring:
  cloud:
    stream:
      default:
        producer:
          useNativeEncoding: true
        consumer:
          useNativeEncoding: true
      bindings:
        controlComponentRequests:
          destination: control-component-requests
          content-type: application/*+avro
        controlComponentResponses-in-0:
          destination: control-component-responses
          content-type: application/*+avro
      kafka:
        binder:
          brokers: dockerhost.fritz.box
          producer-properties:
            key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            #key.deserializer: org.apache.kafka.common.serialization.StringSerializer
            value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
            schema.registry.url: http://dockerhost.fritz.box:8081
          consumer-properties:
            key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
            #key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
            schema.registry.url: http://dockerhost.fritz.box:8081
            specific.avro.reader: true

logging.level.org.camunda.bpm.client: info # increase the log level of the application

camunda.processDeployer:
  #watchedPath: ./processes
  fileSuffixes: .bpmn
  recursive: false
  endpoint: ${CAMUNDA_REST_ENDPOINT}
camunda.bpm.client:
  base-url: ${CAMUNDA_REST_ENDPOINT} # the URL pointing to the Camunda Platform Runtime REST API
  async-response-timeout: 1000 # Defines the maximum duration of the long-polling request
  worker-id: wallet-worker # Identifies the worker towards the Engine
  lock-duration: 86400000 # 1day, defines how many milliseconds the External Tasks are locked until they can be fetched again
  subscriptions:
    executePlan:
      variable-names: plan
      auto-open: false