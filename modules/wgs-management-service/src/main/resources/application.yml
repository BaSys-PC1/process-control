debug: false
logging:
  level:
    root: INFO
    de.dfki.cos.basys: INFO
server:
  port: 8089
management:
  endpoints:
    web:
      exposure:
        include: "health,metrics"

basys:
  aasRegistry:
    type: dotaas
    service:
      connectionString: ${AAS_REGISTRY_ENDPOINT}
  semanticIds:
    idShort: boxed_raspberry_pi_type_aas
    processSubmodel: https://dfki.de/ids/cd/sm_processes
  wgsDashboard:
    connectionString: ${WGS_DASHBOARD_ENDPOINT}

spring:
  application:
    name: wgs-management-service
  data:
    neo4j:
      username: ${NEO4J_USERNAME}
      password: ${NEO4J_PASSWORD}
  neo4j:
    uri: ${NEO4J_ENDPOINT}
  cloud:
    function:
      definition: notificationUpdates;stepChangeUpdates
    stream:
      kafka:
        binder:
          brokers: ${KAFKA_BROKER_ENDPOINT}
      bindings:
        notificationUpdates-in-0:
          destination: wgs-notification
          content-type: application/*+avro
          binder: kafka-avro
        stepChangeUpdates-in-0:
          destination: wgs-step-change
          content-type: application/*+avro
          binder: kafka-avro
        notification:
          destination: wgs-notification
          content-type: application/*+avro
          binder: kafka-avro
          producer:
            useNativeEncoding: true
      binders:
        kafka-json:
          type: kafka
        kafka-avro:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      producer-properties:
                        key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
                        #key.deserializer: org.apache.kafka.common.serialization.StringSerializer
                        value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
                        schema.registry.url: ${SCHEMA_REGISTRY_ENDPOINT}
                      consumer-properties:
                        key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                        #key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                        value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                        schema.registry.url: ${SCHEMA_REGISTRY_ENDPOINT}
                        specific.avro.reader: true

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_SERVER_ENDPOINT}

mqtt:
  automaticReconnect: true
  cleanSession: true
  connectionTimeout: 10
  clientId: wgs-management-service
  hostname: ${MQTT_BROKER_ENDPOINT}
  port: 1883

