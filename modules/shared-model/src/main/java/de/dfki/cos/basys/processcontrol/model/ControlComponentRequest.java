/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.dfki.cos.basys.processcontrol.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ControlComponentRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 645819251129383922L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ControlComponentRequest\",\"namespace\":\"de.dfki.cos.basys.processcontrol.model\",\"fields\":[{\"name\":\"componentId\",\"type\":\"string\"},{\"name\":\"correlationId\",\"type\":\"string\"},{\"name\":\"occupierId\",\"type\":\"string\"},{\"name\":\"requestType\",\"type\":{\"type\":\"enum\",\"name\":\"ControlComponentRequestType\",\"symbols\":[\"OCCUPATION_COMMAND_REQUEST\",\"EXECUTION_MODE_REQUEST\",\"EXECUTION_COMMAND_REQUEST\",\"OPERATION_MODE_REQUEST\"]}},{\"name\":\"command\",\"type\":[{\"type\":\"enum\",\"name\":\"OccupationCommand\",\"symbols\":[\"FREE\",\"OCCUPY\",\"PRIO\"]},{\"type\":\"enum\",\"name\":\"ExecutionMode\",\"symbols\":[\"AUTO\",\"SEMIAUTO\",\"MANUAL\",\"SIMULATE\"]},{\"type\":\"enum\",\"name\":\"ExecutionCommand\",\"symbols\":[\"RESET\",\"START\",\"STOP\",\"HOLD\",\"UNHOLD\",\"SUSPEND\",\"UNSUSPEND\",\"ABORT\",\"CLEAR\"]},{\"type\":\"record\",\"name\":\"OperationMode\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"inputParameters\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Variable\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"value\",\"type\":[\"null\",\"boolean\",\"long\",\"double\",\"string\"]},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"VariableType\",\"symbols\":[\"NULL\",\"BOOLEAN\",\"INTEGER\",\"STRING\",\"DOUBLE\",\"LONG\",\"DATE\"]}}]}}},{\"name\":\"outputParameters\",\"type\":{\"type\":\"array\",\"items\":\"Variable\"}}]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ControlComponentRequest> ENCODER =
      new BinaryMessageEncoder<ControlComponentRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ControlComponentRequest> DECODER =
      new BinaryMessageDecoder<ControlComponentRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ControlComponentRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ControlComponentRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ControlComponentRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ControlComponentRequest>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ControlComponentRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ControlComponentRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ControlComponentRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ControlComponentRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence componentId;
   private java.lang.CharSequence correlationId;
   private java.lang.CharSequence occupierId;
   private de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType requestType;
   private java.lang.Object command;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ControlComponentRequest() {}

  /**
   * All-args constructor.
   * @param componentId The new value for componentId
   * @param correlationId The new value for correlationId
   * @param occupierId The new value for occupierId
   * @param requestType The new value for requestType
   * @param command The new value for command
   */
  public ControlComponentRequest(java.lang.CharSequence componentId, java.lang.CharSequence correlationId, java.lang.CharSequence occupierId, de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType requestType, java.lang.Object command) {
    this.componentId = componentId;
    this.correlationId = correlationId;
    this.occupierId = occupierId;
    this.requestType = requestType;
    this.command = command;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return componentId;
    case 1: return correlationId;
    case 2: return occupierId;
    case 3: return requestType;
    case 4: return command;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: componentId = (java.lang.CharSequence)value$; break;
    case 1: correlationId = (java.lang.CharSequence)value$; break;
    case 2: occupierId = (java.lang.CharSequence)value$; break;
    case 3: requestType = (de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType)value$; break;
    case 4: command = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'componentId' field.
   * @return The value of the 'componentId' field.
   */
  public java.lang.CharSequence getComponentId() {
    return componentId;
  }


  /**
   * Sets the value of the 'componentId' field.
   * @param value the value to set.
   */
  public void setComponentId(java.lang.CharSequence value) {
    this.componentId = value;
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public java.lang.CharSequence getCorrelationId() {
    return correlationId;
  }


  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.CharSequence value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'occupierId' field.
   * @return The value of the 'occupierId' field.
   */
  public java.lang.CharSequence getOccupierId() {
    return occupierId;
  }


  /**
   * Sets the value of the 'occupierId' field.
   * @param value the value to set.
   */
  public void setOccupierId(java.lang.CharSequence value) {
    this.occupierId = value;
  }

  /**
   * Gets the value of the 'requestType' field.
   * @return The value of the 'requestType' field.
   */
  public de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType getRequestType() {
    return requestType;
  }


  /**
   * Sets the value of the 'requestType' field.
   * @param value the value to set.
   */
  public void setRequestType(de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType value) {
    this.requestType = value;
  }

  /**
   * Gets the value of the 'command' field.
   * @return The value of the 'command' field.
   */
  public java.lang.Object getCommand() {
    return command;
  }


  /**
   * Sets the value of the 'command' field.
   * @param value the value to set.
   */
  public void setCommand(java.lang.Object value) {
    this.command = value;
  }

  /**
   * Creates a new ControlComponentRequest RecordBuilder.
   * @return A new ControlComponentRequest RecordBuilder
   */
  public static de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder newBuilder() {
    return new de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder();
  }

  /**
   * Creates a new ControlComponentRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ControlComponentRequest RecordBuilder
   */
  public static de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder newBuilder(de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder other) {
    if (other == null) {
      return new de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder();
    } else {
      return new de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder(other);
    }
  }

  /**
   * Creates a new ControlComponentRequest RecordBuilder by copying an existing ControlComponentRequest instance.
   * @param other The existing instance to copy.
   * @return A new ControlComponentRequest RecordBuilder
   */
  public static de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder newBuilder(de.dfki.cos.basys.processcontrol.model.ControlComponentRequest other) {
    if (other == null) {
      return new de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder();
    } else {
      return new de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for ControlComponentRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ControlComponentRequest>
    implements org.apache.avro.data.RecordBuilder<ControlComponentRequest> {

    private java.lang.CharSequence componentId;
    private java.lang.CharSequence correlationId;
    private java.lang.CharSequence occupierId;
    private de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType requestType;
    private java.lang.Object command;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.componentId)) {
        this.componentId = data().deepCopy(fields()[0].schema(), other.componentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.occupierId)) {
        this.occupierId = data().deepCopy(fields()[2].schema(), other.occupierId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.requestType)) {
        this.requestType = data().deepCopy(fields()[3].schema(), other.requestType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.command)) {
        this.command = data().deepCopy(fields()[4].schema(), other.command);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing ControlComponentRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(de.dfki.cos.basys.processcontrol.model.ControlComponentRequest other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.componentId)) {
        this.componentId = data().deepCopy(fields()[0].schema(), other.componentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[1].schema(), other.correlationId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.occupierId)) {
        this.occupierId = data().deepCopy(fields()[2].schema(), other.occupierId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.requestType)) {
        this.requestType = data().deepCopy(fields()[3].schema(), other.requestType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.command)) {
        this.command = data().deepCopy(fields()[4].schema(), other.command);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'componentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getComponentId() {
      return componentId;
    }


    /**
      * Sets the value of the 'componentId' field.
      * @param value The value of 'componentId'.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder setComponentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.componentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'componentId' field has been set.
      * @return True if the 'componentId' field has been set, false otherwise.
      */
    public boolean hasComponentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'componentId' field.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder clearComponentId() {
      componentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCorrelationId() {
      return correlationId;
    }


    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder setCorrelationId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.correlationId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'occupierId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOccupierId() {
      return occupierId;
    }


    /**
      * Sets the value of the 'occupierId' field.
      * @param value The value of 'occupierId'.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder setOccupierId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.occupierId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'occupierId' field has been set.
      * @return True if the 'occupierId' field has been set, false otherwise.
      */
    public boolean hasOccupierId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'occupierId' field.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder clearOccupierId() {
      occupierId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestType' field.
      * @return The value.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType getRequestType() {
      return requestType;
    }


    /**
      * Sets the value of the 'requestType' field.
      * @param value The value of 'requestType'.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder setRequestType(de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType value) {
      validate(fields()[3], value);
      this.requestType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'requestType' field has been set.
      * @return True if the 'requestType' field has been set, false otherwise.
      */
    public boolean hasRequestType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'requestType' field.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder clearRequestType() {
      requestType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'command' field.
      * @return The value.
      */
    public java.lang.Object getCommand() {
      return command;
    }


    /**
      * Sets the value of the 'command' field.
      * @param value The value of 'command'.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder setCommand(java.lang.Object value) {
      validate(fields()[4], value);
      this.command = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'command' field has been set.
      * @return True if the 'command' field has been set, false otherwise.
      */
    public boolean hasCommand() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'command' field.
      * @return This builder.
      */
    public de.dfki.cos.basys.processcontrol.model.ControlComponentRequest.Builder clearCommand() {
      command = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ControlComponentRequest build() {
      try {
        ControlComponentRequest record = new ControlComponentRequest();
        record.componentId = fieldSetFlags()[0] ? this.componentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.correlationId = fieldSetFlags()[1] ? this.correlationId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.occupierId = fieldSetFlags()[2] ? this.occupierId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.requestType = fieldSetFlags()[3] ? this.requestType : (de.dfki.cos.basys.processcontrol.model.ControlComponentRequestType) defaultValue(fields()[3]);
        record.command = fieldSetFlags()[4] ? this.command :  defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ControlComponentRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<ControlComponentRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ControlComponentRequest>
    READER$ = (org.apache.avro.io.DatumReader<ControlComponentRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










